---
import MainLayout from '@/layouts/MainLayout.astro';
import slugify from '@/utils/slugify';
import formatDatetime from '@/utils/formatDatetime';
import Tag from '@/components/Tag.astro';
import { type CollectionEntry, getCollection } from 'astro:content';

// import { Image } from '@astrojs/image/components';

type PostResult = {
	params: {
		slug: string;
	};
	props?: {
		post: CollectionEntry<"articles">;
	};
}[];

export async function getStaticPaths() {
	const posts = await getCollection('articles');

	let postResult: PostResult = posts.map((post) => {
		return {
			params: {
				slug: slugify(post.slug),
			},
			props: {
				post,
			},
		};
	});

	return [...postResult];
}

const { data, render } = Astro.props.post;
const { title, image, datetime, tags } = data;
const { Content } = await render();

---

<MainLayout frontmatter={data} image={image}>
	<div class='xl:relative'>
		<div class='max-w-2xl mx-auto'>
			<a
				href='/articles/'
				type='button'
				aria-label='Go back to articles'
				class='group mb-8 flex h-10 w-10 items-center justify-center rounded-full bg-white shadow-md shadow-zinc-800/5 ring-1 ring-zinc-900/5 transition dark:border dark:border-zinc-700/50 dark:bg-zinc-800 dark:ring-0 dark:ring-white/10 dark:hover:border-zinc-700 dark:hover:ring-white/20 lg:absolute lg:-left-5 lg:-mt-2 lg:mb-0 xl:-top-1.5 xl:left-0 xl:mt-0'
			>
				<svg
					viewBox='0 0 16 16'
					fill='none'
					aria-hidden='true'
					class='w-4 h-4 transition stroke-zinc-500 group-hover:stroke-zinc-700 dark:stroke-zinc-500 dark:group-hover:stroke-zinc-400'
				>
					<path
						d='M7.25 11.25 3.75 8m0 0 3.5-3.25M3.75 8h8.5'
						stroke-width='1.5'
						stroke-linecap='round'
						stroke-linejoin='round'></path>
				</svg>
			</a>
			<article>
				<header class='flex flex-col'>
					<h1
						class='mt-6 text-4xl font-bold tracking-tight text-zinc-800 dark:text-zinc-100 sm:text-5xl'
					>
						{title}
					</h1>
					<time
						datetime='2022-09-05'
						class='flex items-center order-first text-base text-zinc-400 dark:text-zinc-500'
					>
						<span class='h-4 w-0.5 rounded-full bg-zinc-200 dark:bg-zinc-500'
						></span>
						<span class='ml-3'>{formatDatetime(datetime)}</span>
					</time>
					<ul class='mt-5 text-zinc-600 dark:text-zinc-400'>
						{tags.map((tag: string) => <Tag name={tag} />)}
					</ul>
				</header>
				<!-- {
					image && 
					<Image src={image.src} alt={image.alt} width={1200} height={600} format="webp" fit="cover"/>
				} -->
				<div class='mt-8 prose dark:prose-invert'>
					<Content />
				</div>
			</article>
		</div>
	</div>
</MainLayout>

<script>
	let copyButtonLabel = 'Copy Code';
	let codeBlocks = Array.from(document.querySelectorAll('pre'));

	for (let codeBlock of codeBlocks) {
		let wrapper = document.createElement('div');
		wrapper.style.position = 'relative';

		let copyButton = document.createElement('button');
		copyButton.className = 'copy-code';
		copyButton.innerHTML = copyButtonLabel;

		codeBlock.setAttribute('tabindex', '0');
		codeBlock.appendChild(copyButton);
		// wrap codebock with relative parent element
		codeBlock.parentNode.insertBefore(wrapper, codeBlock);
		wrapper.appendChild(codeBlock);

		copyButton.addEventListener('click', async () => {
			await copyCode(codeBlock, copyButton);
		});
	}

	async function copyCode(block, button) {
		let code = block.querySelector('code');
		let text = code.innerText;

		try {
			await navigator.clipboard.writeText(text);

			// visual feedback that task is completed
			button.innerText = 'Code Copied';

			setTimeout(() => {
				button.innerText = copyButtonLabel;
			}, 700);
		} catch (err) {
			console.error(err)
		}
	}
</script>
